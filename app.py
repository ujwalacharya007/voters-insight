import streamlit as st
import io
import pandas as pd
import re
import platform
from PyPDF2 import PdfReader, PdfWriter
from pypdf import PdfReader as MergeReader, PdfWriter as MergeWriter
from pdf2image import convert_from_bytes
from PIL import Image
import pytesseract
import plotly.graph_objects as go

st.set_page_config(page_title="ЁЯУК Unified PDF Insight System", layout="wide")

# Language selector
language = st.selectbox("Choose Language / рднрд╛рд╖рд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН", ["English", "рдиреЗрдкрд╛рд▓реА"], index=0)

# Translations
T = {
    "English": {
        "split": "ЁЯУД Split PDF", "merge": "ЁЯзй Merge PDFs", "ocr": "ЁЯза OCR Extract", "insight": "ЁЯУК Excel Insights",
        "upload_pdf_split": "Upload a PDF to split", "start_page": "Start Page", "end_page": "End Page", "download_split": "ЁЯУе Download Split PDF",
        "upload_pdf_merge": "Choose PDF files to merge", "download_merged": "ЁЯУе Download Merged PDF",
        "upload_pdf_ocr": "ЁЯУд Upload scanned PDF for OCR", "download_excel": "ЁЯУе Download Excel File",
        "ocr_processing": "ЁЯФД OCR in progress. Please wait...", "ocr_done": "тЬЕ OCR completed. Extracting structured data...",
        "no_data": "тЪая╕П No structured data matched.",
        "upload_excel": "ЁЯУд Upload Excel File", "age_chart": "ЁЯУИ Show Age Group Pie Chart",
        "gender_chart": "ЁЯзн Show Gender Distribution", "gender_chart_type": "Chart Type",
        "caste_chart": "ЁЯП╖я╕П Show Castes by Gender", "upload_warning": "ЁЯУД Please upload an Excel file with columns 'рдЙрдореЗрд░', 'рд▓рд┐рдЩреНрдЧ', 'рдЬрд╛рддрд┐'."
    },
    "рдиреЗрдкрд╛рд▓реА": {
        "split": "ЁЯУД PDF рдкреЗрдЬ рдХрд╛рдЯреНрдиреЗ", "merge": "ЁЯзй PDF рдорд┐рд╕рд╛рдЙрдиреЗ", "ocr": "ЁЯза OCR рдирд╛рдо рдирд┐рдХрд╛рд▓реНрдиреЗ", "insight": "ЁЯУК Excel рдбрд╛рдЯрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "upload_pdf_split": "PDF рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН рдЬрд╕рд▓рд╛рдИ рдХрд╛рдЯреНрди рдЪрд╛рд╣рдиреБрд╣реБрдиреНрдЫ", "start_page": "рд╕реБрд░реБрдХреЛ рдкреЗрдЬ", "end_page": "рдЕрдиреНрддрд┐рдо рдкреЗрдЬ", "download_split": "ЁЯУе рдХрд╛рдЯрд┐рдПрдХреЛ PDF рдбрд╛рдЙрдирд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "upload_pdf_merge": "рдорд┐рд╕рд╛рдЙрди PDF рдлрд╛рдЗрд▓рд╣рд░реВ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН", "download_merged": "ЁЯУе рдорд┐рд╕рд╛рдЗрдПрдХреЛ PDF рдбрд╛рдЙрдирд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "upload_pdf_ocr": "ЁЯУд OCR рдЧрд░реНрди PDF рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН", "download_excel": "ЁЯУе Excel рдлрд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "ocr_processing": "ЁЯФД OCR рд╣реБрдБрджреИрдЫ... рдХреГрдкрдпрд╛ рдкреНрд░рддрд┐рдХреНрд╖рд╛ рдЧрд░реНрдиреБрд╣реЛрд╕реН...", "ocr_done": "тЬЕ OCR рд╕рдХрд┐рдпреЛред рдбрд╛рдЯрд╛ рдирд┐рдХрд╛рд▓рд┐рдБрджреИрдЫ...",
        "no_data": "тЪая╕П рдбрд╛рдЯрд╛ рдорд┐рд▓реЗрдиред", "upload_excel": "ЁЯУд Excel рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН",
        "age_chart": "ЁЯУИ рдЙрдореЗрд░ рд╕рдореВрд╣ рдЪрд╛рд░реНрдЯ рджреЗрдЦрд╛рдЙрдиреБрд╣реЛрд╕реН", "gender_chart": "ЁЯзн рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг рджреЗрдЦрд╛рдЙрдиреБрд╣реЛрд╕реН",
        "gender_chart_type": "рдЪрд╛рд░реНрдЯ рдкреНрд░рдХрд╛рд░", "caste_chart": "ЁЯП╖я╕П рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рдЪрд╛рд░реНрдЯ",
        "upload_warning": "ЁЯУД рдХреГрдкрдпрд╛ 'рдЙрдореЗрд░', 'рд▓рд┐рдЩреНрдЧ', 'рдЬрд╛рддрд┐' рднрдПрдХрд╛ Excel рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реНред"
    }
}
labels = T[language]

tabs = st.tabs([labels["split"], labels["merge"], labels["ocr"], labels["insight"]])

# -------------------- Split PDF (Optimized for Large Files) ---------------------
with tabs[0]:
    st.header(labels["split"])
    uploaded_file = st.file_uploader(labels["upload_pdf_split"], type=["pdf"], key="split_pdf")
    start_page = st.number_input(labels["start_page"], min_value=1, step=1)
    end_page = st.number_input(labels["end_page"], min_value=1, step=1)

    if uploaded_file and start_page <= end_page:
        try:
            uploaded_bytes = uploaded_file.read()  # read as bytes to avoid stream exhaustion
            reader = PdfReader(io.BytesIO(uploaded_bytes))
            total_pages = len(reader.pages)
            start_idx = start_page - 1
            end_idx = min(end_page, total_pages)

            if start_idx >= total_pages:
                st.error("ЁЯЪл Start page exceeds total page count.")
            else:
                writer = PdfWriter()
                for i in range(start_idx, end_idx):
                    writer.add_page(reader.pages[i])

                output = io.BytesIO()
                writer.write(output)
                output.seek(0)

                st.success("тЬЕ PDF split successfully!")
                st.download_button(
                    label=labels["download_split"],
                    data=output,
                    file_name="split_output.pdf",
                    mime="application/pdf"
                )
        except Exception as e:
            st.error(f"тЭМ Error splitting PDF: {str(e)}")


# -------------------- Merge PDF ---------------------
with tabs[1]:
    st.header(labels["merge"])
    uploaded_files = st.file_uploader(labels["upload_pdf_merge"], type="pdf", accept_multiple_files=True, key="merge_pdf")

    if uploaded_files:
        writer = MergeWriter()
        try:
            for file in uploaded_files:
                reader = MergeReader(file)
                for page in reader.pages:
                    writer.add_page(page)

            merged_pdf = io.BytesIO()
            writer.write(merged_pdf)
            merged_pdf.seek(0)

            st.success("тЬЕ PDFs merged successfully!")
            st.download_button(labels["download_merged"], data=merged_pdf, file_name="merged_output.pdf", mime="application/pdf")
        except Exception as e:
            st.error(f"тЭМ Error: {e}")

# -------------------- OCR Extract to Excel ---------------------

import platform

if platform.system() == 'Windows':
    pytesseract.pytesseract.tesseract_cmd = r'C:\Users\Admin\Tesseract-OCR\Tesseract-OCR\tesseract.exe'
else:
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
with tabs[2]:
    st.header(labels["ocr"])
    uploaded_file = st.file_uploader(labels["upload_pdf_ocr"], type="pdf", key="ocr_pdf")

    if uploaded_file:
        try:
            st.info(labels["ocr_processing"])
            images = convert_from_bytes(uploaded_file.read(), dpi=383)
            num_pages = len(images)
            progress_bar = st.progress(0)
            all_text = ""

            for i, image in enumerate(images):
                progress_bar.progress((i + 1) / num_pages)
                gray_image = image.convert("L")
                binary_image = gray_image.point(lambda x: 0 if x < 200 else 255, '1')
                text = pytesseract.image_to_string(binary_image, lang='nep')
                all_text += f"Page {i + 1}:\n{text}\n\n"
                st.text_area(f"ЁЯУЭ OCR Preview (Page {i+1})", value=text[:500], height=100, key=f"preview_{i}", disabled=True)

            st.success(labels["ocr_done"])

            pattern = re.compile(r'([^\d\.\n]+?)\s+(\d+)\s+рд╡рд░реНрд╖\s+/\s+(рдкреБрд░реБрд╖|рдорд╣рд┐рд▓рд╛)\s+([^\n]+)')
            matches = re.findall(pattern, all_text)

            if not matches:
                st.warning(labels["no_data"])
            else:
                data = {
                    'рдирд╛рдо': [match[0].strip() for match in matches],
                    'рдЙрдореЗрд░': [int(match[1]) for match in matches],
                    'рд▓рд┐рдЩреНрдЧ': [match[2] for match in matches],
                    'рдЬрд╛рддрд┐': [match[0].strip().split()[-1] for match in matches]
                }
                df = pd.DataFrame(data)
                st.dataframe(df.head(50), use_container_width=True)

                excel_buffer = io.BytesIO()
                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                    df.to_excel(writer, index=False, sheet_name='Extracted Data')
                excel_buffer.seek(0)

                st.download_button(labels["download_excel"], data=excel_buffer, file_name="extracted_data.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception as e:
            st.error(f"тЭМ Error: {e}")

# -------------------- Excel Visualization ---------------------
# -------------------- Excel Visualization ---------------------
with tabs[3]:
    st.header("ЁЯУК Excel рдбрд╛рдЯрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг")
    excel_file = st.file_uploader("ЁЯУд Excel рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реН", type=["xlsx"], key="excel_file")

    def convert_to_nepali_number(num):
        eng = '0123456789'
        nep = 'режрезреирейрекрелремренреореп'
        return ''.join(nep[eng.index(ch)] if ch in eng else ch for ch in str(num))

    if excel_file:
        df = pd.read_excel(excel_file)
        df['рдЬрд╛рддрд┐'] = df['рдЬрд╛рддрд┐'].astype(str).str.strip().replace({
            'рдЧреБрд░реБрдЩреНрдЧ': 'рдЧреБрд░реБрдЩ', 'рдЧреБрд░реВрдЩреНрдЧ': 'рдЧреБрд░реБрдЩ', 'рдЧреБрд░реВрдЩ': 'рдЧреБрд░реБрдЩ'
        })

        def categorize_age(age):
            if age < 20:
                return '<20'
            elif age <= 35:
                return '21тАУ35'
            elif age <= 50:
                return '36тАУ50'
            else:
                return '51+'

        df['рдЙрдореЗрд░ рд╕рдореВрд╣'] = df['рдЙрдореЗрд░'].apply(categorize_age)
        age_labels = {'<20': 'реиреж рд╡рд░реНрд╖ рдореБрдирд┐', '21тАУ35': 'реирез рджреЗрдЦрд┐ рейрел рд╡рд░реНрд╖', '36тАУ50': 'рейрем рджреЗрдЦрд┐ релреж рд╡рд░реНрд╖', '51+': 'релрез рд╡рд░реНрд╖ рдорд╛рдерд┐'}
        order = ['<20', '21тАУ35', '36тАУ50', '51+']
        age_counts = df['рдЙрдореЗрд░ рд╕рдореВрд╣'].value_counts().reindex(order, fill_value=0)

        # Summary KPIs
        рдХреБрд▓_рд╡реНрдпрдХреНрддрд┐ = len(df)
        рдФрд╕рдд_рдЙрдореЗрд░ = round(df['рдЙрдореЗрд░'].mean(), 1)
        рдкреБрд░реБрд╖_рд╕рдВрдЦреНрдпрд╛ = (df['рд▓рд┐рдЩреНрдЧ'] == 'рдкреБрд░реБрд╖').sum()
        рдорд╣рд┐рд▓рд╛_рд╕рдВрдЦреНрдпрд╛ = (df['рд▓рд┐рдЩреНрдЧ'] == 'рдорд╣рд┐рд▓рд╛').sum()
        рдЕрдиреНрдп_рд╕рдВрдЦреНрдпрд╛ = рдХреБрд▓_рд╡реНрдпрдХреНрддрд┐ - (рдкреБрд░реБрд╖_рд╕рдВрдЦреНрдпрд╛ + рдорд╣рд┐рд▓рд╛_рд╕рдВрдЦреНрдпрд╛)

        st.subheader("ЁЯУЛ рдЬрдирд╕рдВрдЦреНрдпрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдбреНрдпрд╛рд╕рдмреЛрд░реНрдб")
        st.markdown("""
        рдпреЛ рдбреНрдпрд╛рд╕рдмреЛрд░реНрдбрд▓реЗ Excel рдмрд╛рдЯ рдкреНрд░рд╛рдкреНрдд рдЬрдирд╕рдВрдЦреНрдпрд╛ рд╡рд┐рд╡рд░рдгрд▓рд╛рдИ рдиреЗрдкрд╛рд▓реА рднрд╛рд╖рд╛рдорд╛ рд╕рдЬрд┐рд▓реЛ рддрд░рд┐рдХрд╛рд▓реЗ рдкреНрд░рд╕реНрддреБрдд рдЧрд░реНрдЫред рдпрд╣рд╛рдБ рддрдкрд╛рдИрд▓реЗ:
        - рдЬрдореНрдорд╛ рд╡реНрдпрдХреНрддрд┐ рд╕рдВрдЦреНрдпрд╛
        - рдФрд╕рдд рдЙрдореЗрд░
        - рд▓рд┐рдЩреНрдЧ рдЕрдиреБрд╕рд╛рд░ рд╡рд┐рддрд░рдг
        - рдЙрдореЗрд░ рд╕рдореВрд╣ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг
        - рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рдЕрдиреБрдкрд╛рдд
        - рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдФрд╕рдд рдЙрдореЗрд░
        - рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдЙрдореЗрд░ рд╡рд┐рддрд░рдгрдХреЛ рд░реЗрдЦрд╛рдЪрд┐рддреНрд░
        рд╣реЗрд░реНрди рд╕рдХреНрдиреБрд╣реБрдиреНрдЫред
        """)

        with st.container():
            st.markdown("""
            <style>
            .metric-container {
                display: flex;
                justify-content: space-around;
                flex-wrap: wrap;
                padding: 20px 0;
                background-color: #f4f6f8;
                border-radius: 10px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                margin-bottom: 20px;
            }
            .metric-box {
                text-align: center;
                padding: 10px;
                flex: 1 1 180px;
                border-right: 1px solid #ddd;
            }
            .metric-box:last-child {
                border-right: none;
            }
            .metric-title {
                font-weight: bold;
                font-size: 18px;
                color: #444;
                margin-bottom: 5px;
            }
            .metric-value {
                font-size: 28px;
                font-weight: bold;
                color: #111;
            }
            </style>
            <div class="metric-container">
                <div class="metric-box">
                    <div class="metric-title">ЁЯзН рдЬрдореНрдорд╛ рд╡реНрдпрдХреНрддрд┐</div>
                    <div class="metric-value">""" + convert_to_nepali_number(рдХреБрд▓_рд╡реНрдпрдХреНрддрд┐) + """</div>
                </div>
                <div class="metric-box">
                    <div class="metric-title">ЁЯУК рдФрд╕рдд рдЙрдореЗрд░</div>
                    <div class="metric-value">""" + convert_to_nepali_number(рдФрд╕рдд_рдЙрдореЗрд░) + """</div>
                </div>
                <div class="metric-box">
                    <div class="metric-title">ЁЯСитАНЁЯж▒ рдкреБрд░реБрд╖</div>
                    <div class="metric-value">""" + convert_to_nepali_number(рдкреБрд░реБрд╖_рд╕рдВрдЦреНрдпрд╛) + """</div>
                </div>
                <div class="metric-box">
                    <div class="metric-title">ЁЯСйтАНЁЯж▒ рдорд╣рд┐рд▓рд╛</div>
                    <div class="metric-value">""" + convert_to_nepali_number(рдорд╣рд┐рд▓рд╛_рд╕рдВрдЦреНрдпрд╛) + """</div>
                </div>
                <div class="metric-box">
                    <div class="metric-title">ЁЯзС рдЕрдиреНрдп</div>
                    <div class="metric-value">""" + convert_to_nepali_number(рдЕрдиреНрдп_рд╕рдВрдЦреНрдпрд╛) + """</div>
                </div>
            </div>
            """, unsafe_allow_html=True)

        # Visualization Placeholders
        st.markdown("### ЁЯФН рдердк рд╡рд┐рд╡рд░рдг рд╣реЗрд░реНрдирдХрд╛ рд▓рд╛рдЧрд┐ рддрд▓рдХрд╛ рд╡рд┐рдХрд▓реНрдкрд╣рд░реВ рдЪрдпрди рдЧрд░реНрдиреБрд╣реЛрд╕реН:")

        if st.checkbox("ЁЯУИ рдЙрдореЗрд░ рд╕рдореВрд╣ рдЕрдиреБрд╕рд╛рд░ рд╡рд┐рддрд░рдг"):
            labels_nep = [age_labels[label] for label in order]
            hover = [f"{age_labels[label]}<br>({convert_to_nepali_number(count)} рдЬрдирд╕рдВрдЦреНрдпрд╛)" for label, count in zip(order, age_counts)]
            fig = go.Figure(data=[go.Pie(labels=labels_nep, values=age_counts.values, hovertext=hover, hoverinfo="text", textinfo='percent+label')])
            fig.update_layout(title="рдЙрдореЗрд░ рд╕рдореВрд╣ рдЕрдиреБрд╕рд╛рд░ рд╡рд┐рддрд░рдг")
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("ЁЯзСтАНЁЯдЭтАНЁЯзС рд▓рд┐рдЩреНрдЧ рдЕрдиреБрд╕рд╛рд░ рд╡рд┐рддрд░рдг"):
            gender_chart = st.radio("рдЪрд╛рд░реНрдЯ рдкреНрд░рдХрд╛рд░", ["Pie Chart", "Bar Chart"], horizontal=True)
            gender_counts = df['рд▓рд┐рдЩреНрдЧ'].value_counts()
            labels_g = gender_counts.index.tolist()
            values = gender_counts.values.tolist()
            if gender_chart == "Pie Chart":
                fig = go.Figure(data=[go.Pie(labels=labels_g, values=values)])
            else:
                fig = go.Figure(data=[go.Bar(x=labels_g, y=values)])
            fig.update_layout(title="рд▓рд┐рдЩреНрдЧ рдЕрдиреБрд╕рд╛рд░ рд╡рд┐рддрд░рдг")
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("ЁЯП╖я╕П рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг"):
            top_n = st.slider("рд╢реАрд░реНрд╖ рдЬрд╛рддрд┐рд╣рд░реВрдХреЛ рд╕рдВрдЦреНрдпрд╛ рдЫрд╛рдиреНрдиреБрд╣реЛрд╕реН:", 5, 50, 10)
            top_castes = df['рдЬрд╛рддрд┐'].value_counts().head(top_n).index.tolist()
            grouped = df[df['рдЬрд╛рддрд┐'].isin(top_castes)].groupby(['рдЬрд╛рддрд┐', 'рд▓рд┐рдЩреНрдЧ']).size().unstack(fill_value=0)
            fig = go.Figure()
            for gender in grouped.columns:
                fig.add_bar(x=grouped.index, y=grouped[gender], name=gender)
            fig.update_layout(barmode='stack', title='рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг')
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("ЁЯУК рдЙрдореЗрд░ рд╕рдореВрд╣ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг"):
            gender_age_group = df.groupby(['рдЙрдореЗрд░ рд╕рдореВрд╣', 'рд▓рд┐рдЩреНрдЧ']).size().unstack(fill_value=0)
            fig = go.Figure()
            for gender in gender_age_group.columns:
                fig.add_trace(go.Bar(x=gender_age_group.index, y=gender_age_group[gender], name=gender))
            fig.update_layout(barmode='group', title='рдЙрдореЗрд░ рд╕рдореВрд╣ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рд╡рд┐рддрд░рдг')
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("ЁЯУП рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдФрд╕рдд рдЙрдореЗрд░"):
            top_castes = df['рдЬрд╛рддрд┐'].value_counts().head(10).index
            avg_age = df[df['рдЬрд╛рддрд┐'].isin(top_castes)].groupby('рдЬрд╛рддрд┐')['рдЙрдореЗрд░'].mean().sort_values()
            fig = go.Figure([go.Bar(x=avg_age.index, y=avg_age.values)])
            fig.update_layout(title="рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдФрд╕рдд рдЙрдореЗрд░", yaxis_title="рдФрд╕рдд рдЙрдореЗрд░")
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("тЪЦя╕П рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рдкреНрд░рддрд┐рд╢рдд"):
            top_castes = df['рдЬрд╛рддрд┐'].value_counts().head(10).index
            grouped = df[df['рдЬрд╛рддрд┐'].isin(top_castes)].groupby(['рдЬрд╛рддрд┐', 'рд▓рд┐рдЩреНрдЧ']).size().unstack(fill_value=0)
            grouped['Total'] = grouped.sum(axis=1)
            grouped['% рдорд╣рд┐рд▓рд╛'] = (grouped['рдорд╣рд┐рд▓рд╛'] / grouped['Total']) * 100
            grouped['% рдкреБрд░реБрд╖'] = (grouped['рдкреБрд░реБрд╖'] / grouped['Total']) * 100
            fig = go.Figure()
            fig.add_trace(go.Bar(x=grouped.index, y=grouped['% рдорд╣рд┐рд▓рд╛'], name='% рдорд╣рд┐рд▓рд╛'))
            fig.add_trace(go.Bar(x=grouped.index, y=grouped['% рдкреБрд░реБрд╖'], name='% рдкреБрд░реБрд╖'))
            fig.update_layout(barmode='stack', title="рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рд▓рд┐рдЩреНрдЧ рдкреНрд░рддрд┐рд╢рдд")
            st.plotly_chart(fig, use_container_width=True)

        if st.checkbox("ЁЯУИ рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдЙрдореЗрд░ рд╡рд┐рддрд░рдг"):
            age_line = df.groupby(['рдЙрдореЗрд░', 'рдЬрд╛рддрд┐']).size().reset_index(name='count')
            fig = go.Figure()
            for caste in age_line['рдЬрд╛рддрд┐'].unique():
                sub_data = age_line[age_line['рдЬрд╛рддрд┐'] == caste]
                fig.add_trace(go.Scatter(x=sub_data['рдЙрдореЗрд░'], y=sub_data['count'], mode='lines+markers', name=caste))
            fig.update_layout(title='рдЬрд╛рддрд┐ рдЕрдиреБрд╕рд╛рд░ рдЙрдореЗрд░ рд╡рд┐рддрд░рдг', xaxis_title='рдЙрдореЗрд░', yaxis_title='рд╕рдВрдЦреНрдпрд╛')
            st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning("рдХреГрдкрдпрд╛ 'рдЙрдореЗрд░', 'рд▓рд┐рдЩреНрдЧ', 'рдЬрд╛рддрд┐' рднрдПрдХрд╛ Excel рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдЧрд░реНрдиреБрд╣реЛрд╕реНред")
